# frozen_string_literal: true

require_relative '../../../spec_helper'

describe Wpxf::WordPress::FileDownload do
  let(:klass) do
    Class.new(Wpxf::Module) do
      include Wpxf::WordPress::FileDownload
    end
  end

  let(:subject) { klass.new }
  let(:export_path_required) { false }

  describe '#new' do
    it 'should register a generic description' do
      expect(subject.module_desc).to match(/This module exploits a vulnerability/)
    end

    it 'should register the remote_file option' do
      expect(subject.get_option('remote_file')).to_not be_nil
    end

    it 'should register the export_path option' do
      expect(subject.get_option('export_path')).to_not be_nil
    end

    it 'should set the export_path option to not be required by default' do
      expect(subject.get_option('export_path').required?).to be false
    end

    context 'if #export_path_required returns true' do
      it 'should set the export_path option to be required' do
        allow_any_instance_of(klass).to receive(:export_path_required).and_return(true)
        subject = klass.new
        expect(subject.get_option('export_path').required?).to be true
      end
    end
  end

  describe '#export_path_required' do
    it 'should return false by default' do
      expect(subject.export_path_required).to be false
    end
  end

  describe '#working_directory' do
    it 'should return nil by default' do
      expect(subject.working_directory).to be_nil
    end
  end

  describe '#default_remote_file_path' do
    it 'should return nil by default' do
      expect(subject.default_remote_file_path).to be_nil
    end
  end

  describe '#downloader_url' do
    it 'should return nil by default' do
      expect(subject.downloader_url).to be_nil
    end
  end

  describe '#download_request_params' do
    it 'should return nil by default' do
      expect(subject.download_request_params).to be_nil
    end
  end

  describe '#download_request_body' do
    it 'should return nil by default' do
      expect(subject.download_request_body).to be_nil
    end
  end

  describe '#download_request_method' do
    it 'should return :get by default' do
      expect(subject.download_request_method).to eql :get
    end
  end

  describe '#remote_file' do
    it 'should return the value of the remote_file option' do
      subject.set_option_value('remote_file', 'test')
      expect(subject.remote_file).to eql 'test'
    end
  end

  describe '#before_download' do
    it 'should return true by default' do
      expect(subject.before_download).to be true
    end
  end

  describe '#run' do
    context 'if #working_directory is not implemented' do
      it 'should raise an error ' do
        expect { subject.run }.to raise_error('A value must be specified for #working_directory')
      end
    end

    context 'if #before_download returns false' do
      it 'should return false' do
        allow(subject).to receive(:before_download).and_return(false)
        allow(subject).to receive(:working_directory).and_return('wp-content')
        expect(subject.run).to be false
      end
    end
  end
end
